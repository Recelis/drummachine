{"version":3,"sources":["actions/index.js","presentational/drumPad.js","audioclip.js","presentational/keypad.js","container/keys.js","presentational/recordButton.js","container/record.js","presentational/refreshButton.js","container/refresh.js","presentational/sound.js","presentational/displayScreen.js","container/display.js","presentational/playbutton.js","container/play.js","App.js","reducers/index.js","store/index.js","serviceWorker.js","index.js"],"names":["ADD_SOUND","TOGGLE_RECORD","DELETE_SOUND","REFRESH_SEQUENCE","READY_TO_DELETE","CLICKED_SOUND","UNCLICKED_SOUND","DRUM_MACHINE_OFF","DRUM_MACHINE_ON","CLOSED_TO_DELETE","OPEN_TO_DELETE","clickedSound","key","type","unclickedSound","DrumPad","props","react_default","a","createElement","Grid_default","item","xs","className","onStatus","Button_default","variant","buttonStatus","onClick","letter","audioclip","Q","W","E","A","S","D","Z","X","C","objectKeys","Object","keys","audioObj","obj","map","Audio","playSound","currentTime","play","KeyPad","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleKeyPress","bind","assertThisInitialized","document","addEventListener","removeEventListener","event","_this2","allowRecord","keyPressed","toLocaleUpperCase","keyActivity","_this3","addSoundToState","setClicked","setTimeout","setUnclicked","_this4","container","justify","spacing","drumPad","keyState","Component","Keys","connect","state","drumMachine","record","dispatch","sound","RecordButton","recordClassName","recordStatus","console","log","toggleButton","text","Record","message","RefreshButton","clickedRefresh","Refresh","Sound","index","prepareToDelete","deleteThisSound","DisplayScreen","sequence","presentational_sound","Display","drumSounds","readyToDelete","deleteSound","playback","PlayButton","playSequence","stopSequence","seq","seqLen","length","sequenceKeys","ii","push","apply","toConsumableArray","setInterval","clearInterval","id","Play","App","refresh","class","display","initialState","initialSounds","drumApp","combineReducers","arguments","undefined","assign","action","newSound","concat","slice","input","clickedObj","unclickObj","store","createStore","composeWithDevTools","Boolean","window","location","hostname","match","ReactDOM","render","es","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6e808ee1.chunk.js","sourcesContent":["export const ADD_SOUND = \"ADD_SOUND\";\r\nexport const TOGGLE_RECORD = \"TOGGLE_RECORD\";\r\nexport const DELETE_SOUND = \"DELETE_SOUND\";\r\nexport const REFRESH_SEQUENCE = \"REFRESH_SEQUENCE\";\r\nexport const READY_TO_DELETE = \"READY_TO_DELETE\";\r\nexport const CLICKED_SOUND = \"CLICKED_SOUND\";\r\nexport const UNCLICKED_SOUND = \"UNCLICKED_SOUND\";\r\n\r\nexport const DRUM_MACHINE_OFF = false;\r\nexport const DRUM_MACHINE_ON = true;\r\n\r\nexport const CLOSED_TO_DELETE = \"closed\";\r\nexport const OPEN_TO_DELETE = \"open\";\r\n\r\n\r\n// action creators\r\nexport function addSound(sound){\r\n    return{\r\n        type:ADD_SOUND,\r\n        sound\r\n    }\r\n}\r\n\r\nexport function toggleRecord(){\r\n    return{\r\n        type:TOGGLE_RECORD\r\n    }\r\n}\r\n\r\nexport function readyToDelete(sound,index){\r\n    return{\r\n        type:READY_TO_DELETE,\r\n        sound,\r\n        index\r\n    }\r\n}\r\n\r\nexport function deleteSound(index){\r\n    return{\r\n        type:DELETE_SOUND,\r\n        index\r\n    }\r\n}\r\n\r\nexport function refreshSequence(){\r\n    return{\r\n        type:REFRESH_SEQUENCE\r\n    }\r\n}\r\n\r\nexport function clickedSound(key){\r\n    return{\r\n        type: CLICKED_SOUND,\r\n        key\r\n    }\r\n}\r\n\r\nexport function unclickedSound(key){\r\n    return{\r\n        type: UNCLICKED_SOUND,\r\n        key\r\n    }\r\n}\r\n\r\n\r\n","import React, { Component } from \"react\"\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst DrumPad = (props)=> {\r\n    // console.log(onClick);\r\n    return (\r\n        <Grid item xs={4} className=\"drum-pad\">\r\n            {(props.onStatus)?\r\n            <Button variant=\"outlined\" className={props.buttonStatus} onClick = {props.onClick}>\r\n                {props.letter}\r\n            </Button>:\r\n            <Button variant=\"outlined\" className={props.buttonStatus}>\r\n                {props.letter}\r\n            </Button>\r\n            }\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default DrumPad;","export const audioclip = {\n  Q: \"Heater-1\",\n  W: \"Heater-2\",\n  E: \"Heater-3\",\n  A: \"Heater-4_1\",\n  S: \"Heater-6\",\n  D: \"Dsc_Oh\",\n  Z: \"Kick_n_Hat\",\n  X: \"RP4_KICK_1\",\n  C: \"Cev_H2\"\n};\n\nexport const amazonURL = \"https://s3.amazonaws.com/freecodecamp/drums/\";\n\nexport const objectKeys = Object.keys(audioclip);\n\nexport const audioObj = () => {\n  let obj = {};\n  objectKeys.map(key => {\n    obj[key] = new Audio(amazonURL + audioclip[key] + \".mp3\");\n  });\n  return obj;\n};\n\nexport const playSound = (key)=> {\n    audioObj()[key].currentTime = 0; // resets sound so that you play from beginning\n    audioObj()[key].play();\n}","import React, { Component } from \"react\";\r\nimport DrumPad from \"./drumPad\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { audioObj, playSound } from \"../audioclip\";\r\n\r\n/* 'https://s3.amazonaws.com/freecodecamp/drums/Heater-1.mp3'\r\n'https://s3.amazonaws.com/freecodecamp/drums/Heater-2.mp3'\r\n'https://s3.amazonaws.com/freecodecamp/drums/Heater-3.mp3'\r\n'https://s3.amazonaws.com/freecodecamp/drums/Heater-4.mp3'\r\n'https://s3.amazonaws.com/freecodecamp/drums/Heater-6.mp3'\r\n'https://s3.amazonaws.com/freecodecamp/drums/Dsc_Oh.mp3'\r\n'https://s3.amazonaws.com/freecodecamp/drums/Kick_n_Hat.mp3'\r\n'https://s3.amazonaws.com/freecodecamp/drums/RP4_KICK_1.mp3'\r\n'https://s3.amazonaws.com/freecodecamp/drums/Cev_H2.mp3' */\r\n\r\nexport default class KeyPad extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // BINDINGS\r\n    this.handleKeyPress = this.handleKeyPress.bind(this);\r\n  }\r\n  componentDidMount() {\r\n    document.addEventListener(\"keydown\", this.handleKeyPress, false);\r\n  }\r\n  componentWillUnmount() {\r\n    document.removeEventListener(\"keydown\", this.handleKeyPress, false);\r\n  }\r\n\r\n  /* pass keyboard press to this.buttonPress */\r\n  handleKeyPress(event) {\r\n    // check that record button has been pressed\r\n    if (!this.props.allowRecord) return;\r\n    let keyPressed = event.key.toLocaleUpperCase();\r\n    let importantKeys = [\"Q\", \"W\", \"E\", \"A\", \"S\", \"D\", \"Z\", \"X\", \"C\"];\r\n    importantKeys.map(key => {\r\n      if (key == keyPressed) {\r\n        this.keyActivity(key);\r\n      }\r\n    });\r\n  }\r\n\r\n  keyActivity(key) {\r\n    playSound(key);\r\n    this.props.addSoundToState(key.toLocaleUpperCase());\r\n    // call an action\r\n    let newKeyState = {};\r\n    newKeyState[key] = \"clicked\";\r\n    this.props.setClicked(key);\r\n    setTimeout(()=>{\r\n        this.props.setUnclicked(key);\r\n    },100);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Grid container className = \"Keypad\">\r\n        <Grid container xs={12} justify = \"center\">\r\n          <Grid spacing={0} item>\r\n                  <DrumPad\r\n                    letter=\"Q\"\r\n                    onClick={() => this.keyActivity(\"Q\")}\r\n                    buttonStatus={this.props.keyState.Q}\r\n                    onStatus={this.props.allowRecord}\r\n                  />\r\n            </Grid>\r\n            <Grid spacing={0} item>\r\n                  <DrumPad\r\n                    letter=\"W\"\r\n                    onClick={() => this.keyActivity(\"W\")}\r\n                    buttonStatus={this.props.keyState.W}\r\n                    onStatus={this.props.allowRecord}\r\n                  />\r\n            </Grid>\r\n            <Grid spacing={0} item>\r\n                <DrumPad\r\n                  letter=\"E\"\r\n                  onClick={() => this.keyActivity(\"E\")}\r\n                  buttonStatus={this.props.keyState.E}\r\n                  onStatus={this.props.allowRecord}\r\n                />\r\n          </Grid>\r\n          </Grid>\r\n          <Grid container xs = {12} justify = \"center\">\r\n          <Grid spacing={0} item>\r\n            <DrumPad\r\n              letter=\"A\"\r\n              onClick={() => this.keyActivity(\"A\")}\r\n              buttonStatus={this.props.keyState.A}\r\n              onStatus={this.props.allowRecord}\r\n            />\r\n            </Grid>\r\n            <Grid spacing={0} item>\r\n            <DrumPad\r\n              letter=\"S\"\r\n              onClick={() => this.keyActivity(\"S\")}\r\n              buttonStatus={this.props.keyState.S}\r\n              onStatus={this.props.allowRecord}\r\n            />\r\n            </Grid>\r\n            <Grid spacing={0} item>\r\n            <DrumPad\r\n              letter=\"D\"\r\n              onClick={() => this.keyActivity(\"D\")}\r\n              buttonStatus={this.props.keyState.D}\r\n              onStatus={this.props.allowRecord}\r\n            />\r\n            </Grid>\r\n          </Grid>\r\n          <Grid container xs = {12} justify = \"center\">\r\n          <Grid spacing={0} item>\r\n            <DrumPad\r\n              letter=\"Z\"\r\n              onClick={() => this.keyActivity(\"Z\")}\r\n              buttonStatus={this.props.keyState.Z}\r\n              onStatus={this.props.allowRecord}\r\n            />\r\n            </Grid>\r\n            <Grid spacing={0} item>\r\n            <DrumPad\r\n              letter=\"X\"\r\n              onClick={() => this.keyActivity(\"X\")}\r\n              buttonStatus={this.props.keyState.X}\r\n              onStatus={this.props.allowRecord}\r\n            />\r\n            </Grid>\r\n            <Grid spacing={0} item>\r\n            <DrumPad\r\n              letter=\"C\"\r\n              onClick={() => this.keyActivity(\"C\")}\r\n              buttonStatus={this.props.keyState.C}\r\n              onStatus={this.props.allowRecord}\r\n            />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n    );\r\n  }\r\n}\r\n","import { connect } from \"react-redux\";\r\n\r\nimport { addSound, clickedSound, unclickedSound } from \"../actions\"; \r\n\r\nimport KeyPad from \"../presentational/keypad\";\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return {\r\n        allowRecord:state.drumMachine.record,\r\n        keyState:state.keyState\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return {\r\n        addSoundToState:(key)=>{\r\n            dispatch(addSound(key))\r\n        },\r\n        setClicked: (key) => {\r\n            dispatch(clickedSound(key))\r\n        },\r\n        setUnclicked: (key) => {\r\n            dispatch(unclickedSound(key))\r\n        }\r\n    }\r\n}\r\n\r\nconst Keys = connect(mapStateToProps, mapDispatchToProps)(KeyPad);\r\n\r\nexport default Keys;","import React from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst RecordButton = (props) =>{\r\n    let recordClassName = \"\";\r\n    if (props.recordStatus) recordClassName = \"recordOn\";\r\n    else recordClassName = \"recordOff\";\r\n    console.log(recordClassName);\r\n    return <Button variant=\"outlined\" className = {recordClassName} onClick = {props.toggleButton}>{props.text}</Button>\r\n}\r\n\r\nexport default RecordButton;","import { connect } from \"react-redux\"\r\nimport RecordButton from \"../presentational/recordButton\";\r\n\r\nimport { toggleRecord } from \"../actions\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return { \r\n        text: state.drumMachine.text,\r\n        recordStatus: state.drumMachine.record \r\n    }\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        toggleButton: (message) => {\r\n            dispatch(toggleRecord(message))\r\n        }\r\n    }\r\n};\r\n\r\nconst Record = connect(mapStateToProps, mapDispatchToProps)(RecordButton);\r\n\r\nexport default Record;","import React from \"react\";\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst RefreshButton = (props) =>{\r\n    return (\r\n        <Button onClick = {props.clickedRefresh}>Refresh</Button>\r\n    )\r\n}\r\n\r\nexport default RefreshButton;","import { connect } from \"react-redux\";\r\n\r\nimport { refreshSequence } from \"../actions\";\r\n\r\nimport RefreshButton from \"../presentational/refreshButton\";\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return{\r\n        clickedRefresh:()=>{\r\n            dispatch(refreshSequence())\r\n        }\r\n    }\r\n}\r\n\r\n// null is needed for first argument if mapStateToProps is not needed\r\nconst Refresh = connect(null, mapDispatchToProps)(RefreshButton);\r\n\r\nexport default Refresh;","import React, { Component } from \"react\";\nimport Button from \"@material-ui/core/Button\";\n\nclass Sound extends Component {\n  render() {\n    let sound = this.props.sound;\n    let index = this.props.index;\n    return sound[Object.keys(sound)] === \"closed\" ? (\n      <Button\n        className=\"Display-sounds\"\n        onClick={() => this.props.prepareToDelete(Object.keys(sound), index)}\n      >\n        {Object.keys(sound)}\n      </Button>\n    ) : (\n      <span>\n        <Button\n          className=\"Display-sounds\"\n          onClick={() => this.props.prepareToDelete(Object.keys(sound), index)}\n        >\n          {Object.keys(sound)}\n        </Button>\n        <sup>\n          <button\n            className=\"Display-tinyX\"\n            onClick={() => this.props.deleteThisSound(index)}\n          >\n            X\n          </button>\n        </sup>\n      </span>\n    );\n  }\n}\nexport default Sound;\n","import React, { Component } from \"react\";\r\nimport Sound from \"./sound\";\r\n\r\nclass DisplayScreen extends Component {\r\n  render() {\r\n    let sequence = this.props.sequence.map((sound, index) => (\r\n      <Sound sound={sound} index={index} key = {index}\r\n      prepareToDelete = {this.props.prepareToDelete}\r\n      deleteThisSound = {this.props.deleteThisSound}\r\n      />\r\n    ));\r\n    return <div className=\"Display-pattern\">{sequence}</div>;\r\n  }\r\n}\r\n\r\nexport default DisplayScreen;\r\n","import { connect } from \"react-redux\";\r\n\r\nimport { deleteSound, readyToDelete } from \"../actions\";\r\n\r\nimport DisplayScreen from \"../presentational/displayScreen\";\r\n\r\nconst mapStateToProps = (state) =>{\r\n    return {\r\n        sequence:state.drumSounds\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) =>{\r\n    return {\r\n        prepareToDelete:(sound,index)=>{\r\n            dispatch(readyToDelete(sound,index));\r\n        },\r\n        deleteThisSound:(index) =>{\r\n            dispatch(deleteSound(index));\r\n        }\r\n    }\r\n}\r\n\r\nconst Display = connect(mapStateToProps,mapDispatchToProps)(DisplayScreen);\r\n\r\nexport default Display;","import React, { Component } from \"react\";\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport { playSound } from '../audioclip';\r\nlet playback = {};\r\n\r\nexport default class PlayButton extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.playSequence = this.playSequence.bind(this);\r\n        this.stopSequence = this.stopSequence.bind(this);\r\n    }\r\n    playSequence(){\r\n        // pass to local values\r\n        let seq = this.props.sequence;\r\n        let seqLen = seq.length;\r\n        // if empty return \r\n        if (seqLen === 0) return;\r\n        // extract from array ( really stupid code )\r\n        let sequenceKeys = [];\r\n        for (let ii =0; ii < seqLen; ii ++) {\r\n            sequenceKeys.push(...Object.keys(seq[ii])); // should change this data structure so that key isn't button\r\n        }\r\n        let ii = 0;\r\n        playback = setInterval(()=>{\r\n            if (ii >= seqLen) {\r\n                clearInterval(playback);\r\n                this.props.setUnclicked(sequenceKeys[ii-1]); // turn off\r\n                return;\r\n            }\r\n            playSound(sequenceKeys[ii]);\r\n            this.props.setUnclicked(sequenceKeys[ii-1]);\r\n            this.props.setClicked(sequenceKeys[ii]);\r\n            ii++;\r\n            \r\n        }, 500);\r\n    }\r\n    stopSequence(){\r\n        clearInterval(playback);\r\n    }\r\n    render(){\r\n        return (\r\n            <div>\r\n                <Button id = \"play\" onClick = {this.playSequence}>play</Button>\r\n                <Button id = \"play\" onClick = {this.stopSequence}>stop</Button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n","import { connect } from \"react-redux\";\r\nimport { clickedSound, unclickedSound } from \"../actions/index\";\r\nimport PlayButton from \"../presentational/playbutton\";\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        sequence:state.drumSounds\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n    return {\r\n        setClicked: (key) => {\r\n            dispatch(clickedSound(key))\r\n        },\r\n        setUnclicked: (key) => {\r\n            dispatch(unclickedSound(key))\r\n        }\r\n    }\r\n}\r\n\r\nconst Play = connect(mapStateToProps, mapDispatchToProps)(PlayButton);\r\n\r\nexport default Play;","import React, { Component } from \"react\";\nimport \"./App.css\";\n\nimport Keys from \"./container/keys\";\nimport Record from \"./container/record\";\nimport Refresh from \"./container/refresh\";\nimport Display from \"./container/display\";\nimport Play from \"./container/play\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.record = this.record.bind(this);\n    this.refresh = this.refresh.bind(this);\n  }\n  refresh() {\n    console.log(\"refresh\");\n  }\n  record() {\n    console.log(\"recording\");\n  }\n  render() {\n    return (\n      <div id=\"drum-machine\">\n        <p class=\"Display-text\">Display Screen</p>\n        <Display />\n        <div className = \"Control-buttons\">\n        <Record />\n        <Refresh />\n        </div>\n        <Play />\n        <div id=\"drumpads\">\n          <Keys />\n        </div>\n        <br/>\n        <footer>\n          <p className = \"Footer\">\n            This project uses React, Redux, Sass for CSS variables or Material\n            UI (styling typically comes last in the development process) and has\n            been deliberately designed to do more than the User Stories\n            required. It will have an option for saving user inputs, and for\n            automatic replaying. This will ensure that Redux will have to be\n            used in this project.\n          </p>\n          <p>Copyright Jacky Lui 2019</p>\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import {\r\n  ADD_SOUND,\r\n  TOGGLE_RECORD,\r\n  DELETE_SOUND,\r\n  REFRESH_SEQUENCE,\r\n  READY_TO_DELETE,\r\n  DRUM_MACHINE_OFF,\r\n  DRUM_MACHINE_ON,\r\n  CLOSED_TO_DELETE,\r\n  OPEN_TO_DELETE,\r\n  CLICKED_SOUND,\r\n  UNCLICKED_SOUND\r\n} from \"../actions/index\";\r\n\r\nimport { combineReducers } from \"redux\";\r\n\r\n// const initialState = {\r\n//     sequence:[],\r\n//     record:false\r\n// }\r\n\r\nfunction drumSounds(state = [], action) {\r\n  switch (action.type) {\r\n    case ADD_SOUND:\r\n      let newSound = {};\r\n      newSound[action.sound] = CLOSED_TO_DELETE;\r\n      return state.concat(newSound);\r\n    case DELETE_SOUND:\r\n      console.log(state.slice(0, action.index));\r\n      console.log(state.slice(action.index + 1));\r\n      let newState = state\r\n        .slice(0, action.index)\r\n        .concat(state.slice(action.index + 1));\r\n      return newState;\r\n    case REFRESH_SEQUENCE:\r\n      return [];\r\n    case READY_TO_DELETE:\r\n      let input = state.slice();\r\n      if (input.length > 0) {\r\n        if (input[action.index][action.sound] === CLOSED_TO_DELETE) {\r\n          input[action.index][action.sound] = OPEN_TO_DELETE;\r\n        } else {\r\n          input[action.index][action.sound] = CLOSED_TO_DELETE;\r\n        }\r\n      }\r\n      return input;\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst initialState = {\r\n  record: DRUM_MACHINE_OFF,\r\n  text: \"START RECORDING\"\r\n};\r\n\r\nfunction drumMachine(state = initialState, action) {\r\n  switch (action.type) {\r\n    case TOGGLE_RECORD:\r\n      if (state.record)\r\n        return Object.assign({}, state, {\r\n          record: DRUM_MACHINE_OFF,\r\n          text: \"START RECORDING\"\r\n        });\r\n      else\r\n        return Object.assign({}, state, {\r\n          record: DRUM_MACHINE_ON,\r\n          text: \"STOP RECORDING\"\r\n        });\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nlet initialSounds = {\r\n  Q: \"unclicked\",\r\n  W: \"unclicked\",\r\n  E: \"unclicked\",\r\n  A: \"unclicked\",\r\n  S: \"unclicked\",\r\n  D: \"unclicked\",\r\n  Z: \"unclicked\",\r\n  X: \"unclicked\",\r\n  C: \"unclicked\"\r\n};\r\nfunction keyState(state = initialSounds, action) {\r\n  switch (action.type) {\r\n    case CLICKED_SOUND:\r\n      let clickedObj = {};\r\n      clickedObj[action.key] = \"clicked\";\r\n      return Object.assign({}, state, clickedObj);\r\n    case UNCLICKED_SOUND:\r\n      let unclickObj = {};\r\n      unclickObj[action.key] = \"unclicked\";\r\n      return Object.assign({}, state, unclickObj);\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nconst drumApp = combineReducers({\r\n  drumMachine,\r\n  drumSounds,\r\n  keyState\r\n});\r\n\r\nexport default drumApp;\r\n","import drumApp from \"../reducers\";\r\nimport { createStore, compose } from \"redux\";\r\n\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nexport const store = createStore(drumApp, composeWithDevTools());","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from \"./store/index\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store = {store}>\n        <App />\n    </Provider>, \n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}